@using HRApp.Models
@using HRApp.Services.Calendar

<div class="p-4">
    <div class="row">
        <div class="col-md-12">
            <div class="form-group">
                <label>Title</label>
                <RadzenTextBox class="w-100" @bind-Value="CalendarEvent.Title" />
            </div>
        </div>
    </div>
    <div class="row mt-2">
        <div class="col-md-6">
            <div class="form-group">
                <label>Start</label>
                <RadzenDatePicker class="w-100"
                                  @bind-Value="CalendarEvent.Start"
                                  DateFormat="dd/MM/yyyy HH:mm"
                                  ShowTime="true"
                                  ShowSeconds="false" />
            </div>
        </div>
        <div class="col-md-6">
            <div class="form-group">
                <label>End</label>
                <RadzenDatePicker class="w-100"
                                  @bind-Value="CalendarEvent.End"
                                  DateFormat="dd/MM/yyyy HH:mm"
                                  ShowTime="true"
                                  ShowSeconds="false" />
            </div>
        </div>
    </div>
    <div class="row mt-2">
        <div class="col-md-12">
            <div class="form-group">
                <label>Description</label>
                <RadzenTextArea class="w-100" @bind-Value="CalendarEvent.Description" />
            </div>
        </div>
    </div>

    <AuthorizeView Roles="Admin">
        <Authorized Context="authContext">
            <div class="row mt-2">
                <div class="col-md-12">
                    <div class="d-flex align-items-center">
                        <RadzenCheckBox @bind-Value="CalendarEvent.IsCompanyWide" />
                        <label class="ms-2 mb-0">Company-wide event</label>
                    </div>
                </div>
            </div>

            @if (!CalendarEvent.IsCompanyWide && !CalendarEvent.IsApproved)
            {
                <div class="row mt-2">
                    <div class="col-md-12">
                        <div class="alert alert-warning">
                            This event requires approval
                        </div>
                        <RadzenButton Click="@ApproveEvent"
                                      ButtonStyle="ButtonStyle.Success"
                                      Text="Approve Event"
                                      Class="mt-2" />
                    </div>
                </div>
            }
        </Authorized>
    </AuthorizeView>

    <AuthorizeView>
        <Authorized Context="authContext">
            @if (!authContext.User.IsInRole("Admin") && !CalendarEvent.IsApproved)
            {
                <div class="row mt-2">
                    <div class="col-md-12">
                        <div class="alert alert-info">
                            Your event will be visible after admin approval
                        </div>
                    </div>
                </div>
            }
        </Authorized>
    </AuthorizeView>

    <div class="row mt-4">
        <div class="col-md-12 d-flex justify-content-end gap-2">
            <RadzenButton Click="@(() => DialogService.Close(null))"
                          ButtonStyle="ButtonStyle.Light"
                          Text="Cancel" />
            <RadzenButton Click="@(() => DialogService.Close(CalendarEvent))"
                          ButtonStyle="ButtonStyle.Primary"
                          Text="Save" />
        </div>
    </div>
</div>

@code {
    [Parameter]
    public CalendarEvent CalendarEvent { get; set; } = new();

    [Inject]
    public DialogService DialogService { get; set; } = default!;

    [Inject]
    public ICalendarEventService CalendarEventService { get; set; } = default!;

    [Inject]
    public AuthenticationStateProvider AuthenticationStateProvider { get; set; } = default!;

    private async Task ApproveEvent()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var adminUser = authState.User.Identity?.Name ?? "Admin";
        
        CalendarEvent.IsApproved = true;
        CalendarEvent.ApprovedAt = DateTime.UtcNow;
        CalendarEvent.ApprovedBy = adminUser;
        
        DialogService.Close(CalendarEvent);
    }

    private async Task SaveEvent()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var isAdmin = authState.User.IsInRole("Admin");

        if (!isAdmin)
        {
            CalendarEvent.IsApproved = false;
            CalendarEvent.ApprovedAt = null;
            CalendarEvent.ApprovedBy = null;
            // Ensure EmployeeId is maintained
            if (CalendarEvent.EmployeeId == null || CalendarEvent.EmployeeId == 0)
            {
                var employeeIdClaim = authState.User.FindFirst("employee_id")?.Value;
                if (!string.IsNullOrEmpty(employeeIdClaim) && int.TryParse(employeeIdClaim, out int employeeId))
                {
                    CalendarEvent.EmployeeId = employeeId;
                }
            }
        }

        DialogService.Close(CalendarEvent);
    }
}