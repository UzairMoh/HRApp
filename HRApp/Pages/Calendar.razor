@page "/calendar"
@using HRApp.Data
@using HRApp.Models
@using Microsoft.EntityFrameworkCore
@inject DialogService DialogService
@inject DataContext DbContext

<RadzenScheduler @ref="@scheduler" SlotRender="@OnSlotRender" style="height: 768px;" TItem="TimeTrackingEntry" Data="@appointments" StartProperty="StartDate" EndProperty="EndDate"
                 TextProperty="Text" SelectedIndex="2"
                 SlotSelect="@OnSlotSelect" AppointmentSelect="@OnAppointmentSelect" AppointmentRender="@OnAppointmentRender"
                 AppointmentMove="@OnAppointmentMove">
    <RadzenDayView/>
    <RadzenWeekView/>
    <RadzenMonthView/>
</RadzenScheduler>

@code {
    RadzenScheduler<TimeTrackingEntry> scheduler = new();
    Dictionary<DateTime, string> events = new();

    IList<TimeTrackingEntry> appointments = new List<TimeTrackingEntry>();

    protected override async Task OnInitializedAsync()
    {
        appointments = await DbContext.TimeTrackingEntries.ToListAsync();
    }

    void OnSlotRender(SchedulerSlotRenderEventArgs args)
    {
        if (args.View.Text == "Month" && args.Start.Date == DateTime.Today)
        {
            args.Attributes["style"] = "background: var(--rz-scheduler-highlight-background-color, rgba(255,220,40,.2));";
        }

        if ((args.View.Text == "Week" || args.View.Text == "Day") && args.Start.Hour > 8 && args.Start.Hour < 19)
        {
            args.Attributes["style"] = "background: var(--rz-scheduler-highlight-background-color, rgba(255,220,40,.2));";
        }
    }

    async Task OnSlotSelect(SchedulerSlotSelectEventArgs args)
    {
        if (args.View.Text != "Year")
        {
            TimeTrackingEntry data = await DialogService.OpenAsync<LogTimeEntry>("Add Appointment",
                new Dictionary<string, object> { { "Start", args.Start }, { "End", args.End } });

            if (data != null)
            {
                appointments.Add(data);
                await DbContext.TimeTrackingEntries.AddAsync(data);
                await DbContext.SaveChangesAsync();
                await scheduler.Reload();
            }
        }
    }

    async Task OnAppointmentSelect(SchedulerAppointmentSelectEventArgs<TimeTrackingEntry> args)
    {
        var copy = new TimeTrackingEntry
        {
            Id = args.Data.Id,
            StartDate = args.Data.StartDate,
            EndDate = args.Data.EndDate,
            Text = args.Data.Text
        };

        var data = await DialogService.OpenAsync<EditTimeEntry>("Edit Appointment", new Dictionary<string, object> { { "Appointment", copy } });

        if (data != null)
        {
            var appointment = appointments.FirstOrDefault(a => a.Id == data.Id);
            if (appointment != null)
            {
                appointment.StartDate = data.StartDate;
                appointment.EndDate = data.EndDate;
                appointment.Text = data.Notes;
                DbContext.TimeTrackingEntries.Update(appointment);
                await DbContext.SaveChangesAsync();
            }
        }

        await scheduler.Reload();
    }

    void OnAppointmentRender(SchedulerAppointmentRenderEventArgs<TimeTrackingEntry> args)
    {
        if (args.Data.Text == "Birthday")
        {
            args.Attributes["style"] = "background: red";
        }
    }

    async Task OnAppointmentMove(SchedulerAppointmentMoveEventArgs args)
    {
        var draggedAppointment = appointments.FirstOrDefault(x => x == args.Appointment.Data);

        if (draggedAppointment != null)
        {
            draggedAppointment.StartDate = draggedAppointment.StartDate + args.TimeSpan;
            draggedAppointment.EndDate = draggedAppointment.EndDate + args.TimeSpan;
            DbContext.TimeTrackingEntries.Update(draggedAppointment);
            await DbContext.SaveChangesAsync();
            await scheduler.Reload();
        }
    }

}